from flask import Flask, request 
import requests
from datetime import datetime
import re

app = Flask(__name__)

# –¢–≤–æ–π Bitrix24 –≤–µ–±—Ö—É–∫
BITRIX_WEBHOOK = 'https://esprings.bitrix24.ru/rest/1/5s5gfz64192lxuyz'
FIELD_CODE = 'UF_CRM_1743763731661'

# –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def normalize_phone(phone):
    return re.sub(r'\D', '', phone)[-10:]

@app.route('/', methods=['POST'])
def wazzup_webhook():
    data = request.json
    print("üì¨ –í–µ–±—Ö—É–∫ –æ—Ç Wazzup:", data)

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if 'messages' not in data or not data['messages']:
            print("‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞")
            return '', 200

        message = data['messages'][0]
        if message.get('status') != 'inbound':
            print("‚û°Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤—Ö–æ–¥—è—â–µ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return '', 200

        phone = message['chatId']
        print("üìû –ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä:", phone)

        if phone.startswith("7"):
            phone = phone[1:]

        last_10_digits = normalize_phone(phone)
        print(f"üìû –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ü–∏—Ñ—Ä –Ω–æ–º–µ—Ä–∞: {last_10_digits}")

        # –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        contact_id = None
        start = 0
        while True:
            contact_search_url = f'{BITRIX_WEBHOOK}/crm.contact.list'
            response = requests.post(contact_search_url, json={
                "select": ["ID", "PHONE"],
                "filter": {
                    "!PHONE": ""
                },
                "start": start
            })

            result = response.json()
            contacts = result.get('result', [])
            if not contacts:
                break

            for contact in contacts:
                phones = contact.get('PHONE', [])
                for phone_entry in phones:
                    stored_number = normalize_phone(phone_entry['VALUE'])
                    if stored_number == last_10_digits:
                        contact_id = contact['ID']
                        print(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –Ω–∞–π–¥–µ–Ω: {contact_id}")
                        break
                if contact_id:
                    break

            if contact_id or 'next' not in result:
                break

            start = result['next']

        if not contact_id:
            print("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return '', 200

        # –ü–æ–∏—Å–∫ —Å–¥–µ–ª–∫–∏ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç—É
        deal_search_url = f'{BITRIX_WEBHOOK}/crm.deal.list'
        deal_response = requests.post(deal_search_url, json={
            "filter": {
                "CONTACT_ID": contact_id
            },
            "select": ["ID"]
        })

        deal_result = deal_response.json().get('result', [])
        if not deal_result:
            print("‚ùå –°–¥–µ–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return '', 200

        deal_id = deal_result[0]['ID']
        print(f"‚úÖ –°–¥–µ–ª–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: {deal_id}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É
        now = datetime.now().strftime('%Y-%m-%d')
        update_url = f'{BITRIX_WEBHOOK}/crm.deal.update'
        update_response = requests.post(update_url, json={
            "id": deal_id,
            "fields": {
                FIELD_CODE: now
            }
        })

        print("üìù –û—Ç–≤–µ—Ç –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏:", update_response.text)

    except Exception as e:
        print("‚ùó –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ:", str(e))

    return '', 200

if __name__ == '__main__':
    app.run(debug=True)
