from flask import Flask, request 
import requests
from datetime import datetime
import re
import time
import traceback

app = Flask(__name__)

BITRIX_WEBHOOK = 'https://esprings.bitrix24.ru/rest/1/5s5gfz64192lxuyz'
FIELD_CODE = 'UF_CRM_1743763731661'
MAX_PAGES = 3000

def normalize_phone(phone):
    return re.sub(r'\D', '', phone)[-10:]

@app.route('/', methods=['POST'])
def wazzup_webhook():
    data = request.json
    print("üì¨ –í–µ–±—Ö—É–∫ –æ—Ç Wazzup:", data)

    try:
        if 'messages' not in data or not data['messages']:
            print("‚ö†Ô∏è –ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ echo –∏–ª–∏ —Å—Ç–∞—Ç—É—Å")
            return '', 200

        message = data['messages'][0]
        if message.get('status') != 'inbound':
            print("‚û°Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤—Ö–æ–¥—è—â–µ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return '', 200

        phone = message['chatId']
        print("üìû –ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä:", phone)

        if phone.startswith("7"):
            phone = phone[1:]

        last_10_digits = normalize_phone(phone)
        print(f"üìû –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ü–∏—Ñ—Ä –Ω–æ–º–µ—Ä–∞: {last_10_digits}")

        contact_id = None
        start = 0
        pages_checked = 0

        while pages_checked < MAX_PAGES:
            try:
                print(f"üîÅ –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ start={start}")
                contact_search_url = f'{BITRIX_WEBHOOK}/crm.contact.list'
                response = requests.post(contact_search_url, json={
                    "select": ["ID", "PHONE"],
                    "filter": {
                        "!PHONE": ""
                    },
                    "start": start
                }, timeout=30)

                if response.status_code != 200:
                    print(f"‚ùå HTTP {response.status_code} –æ—Ç Bitrix")
                    print("üìÑ –û—Ç–≤–µ—Ç:", response.text)
                    return '', 200

                try:
                    result = response.json()
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ JSON: {e}")
                    print("üìÑ –û—Ç–≤–µ—Ç Bitrix:", response.text)
                    return '', 200

                if "result" not in result or not isinstance(result["result"], list):
                    print(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {start}:")
                    print(result)
                    return '', 200

                contacts = result["result"]
                print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ {len(contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")

                if not contacts:
                    print(f"‚õî –ö–æ–Ω—Ç–∞–∫—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {start}")
                    break

                for contact in contacts:
                    for phone_entry in contact.get('PHONE', []):
                        stored_number = normalize_phone(phone_entry['VALUE'])
                        if stored_number == last_10_digits:
                            contact_id = contact['ID']
                            print(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –Ω–∞–π–¥–µ–Ω: {contact_id}")
                            break
                    if contact_id:
                        break

                if contact_id or 'next' not in result:
                    break

                start = result['next']
                pages_checked += 1
                time.sleep(0.3)

            except Exception:
                print("‚ùó –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ü–∏–∫–ª–µ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:")
                traceback.print_exc()
                return '', 200

        if not contact_id:
            print("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return '', 200

        try:
            print("üîç –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫")
            deal_search_url = f'{BITRIX_WEBHOOK}/crm.deal.list'
            deal_response = requests.post(deal_search_url, json={
                "filter": {
                    "CONTACT_ID": contact_id,
                    "!STAGE_SEMANTIC_ID": "F"
                },
                "select": ["ID", "DATE_CREATE"],
                "order": {
                    "DATE_CREATE": "DESC"
                }
            }, timeout=30)

            if deal_response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–¥–µ–ª–æ–∫: {deal_response.status_code}")
                print("üìÑ –û—Ç–≤–µ—Ç:", deal_response.text)
                return '', 200

            deal_result = deal_response.json().get('result', [])
        except Exception:
            print("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–¥–µ–ª–æ–∫:")
            traceback.print_exc()
            return '', 200

        if not deal_result:
            print("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return '', 200

        deal_id = deal_result[0]['ID']
        print(f"‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: {deal_id}")

        now = datetime.now().strftime('%Y-%m-%d')

        try:
            print(f"üõ° –û–±–Ω–æ–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É {deal_id}, —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ {FIELD_CODE} = {now}")
            update_url = f'{BITRIX_WEBHOOK}/crm.deal.update'
            update_response = requests.post(update_url, json={
                "id": deal_id,
                "fields": {
                    FIELD_CODE: now
                }
            }, timeout=30)

            if update_response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏: {update_response.status_code}")
                print("üìÑ –û—Ç–≤–µ—Ç:", update_response.text)
                return '', 200

            print("üõ° –°–¥–µ–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞–¥–∏–∏")
        except Exception:
            print("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏:")
            traceback.print_exc()
            return '', 200

    except Exception:
        print("‚ùó –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ:")
        traceback.print_exc()
        return '', 200

    return '', 200

if __name__ == '__main__':
    app.run(debug=True)
