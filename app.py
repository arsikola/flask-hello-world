from flask import Flask, request 
import requests
from datetime import datetime
import re
import time

app = Flask(__name__)

BITRIX_WEBHOOK = 'https://esprings.bitrix24.ru/rest/1/5s5gfz64192lxuyz'
FIELD_CODE = 'UF_CRM_1743763731661'

def normalize_phone(phone):
    return re.sub(r'\D', '', phone)[-10:]

@app.route('/', methods=['POST'])
def wazzup_webhook():
    data = request.json
    print("üì¨ –í–µ–±—Ö—É–∫ –æ—Ç Wazzup:", data)

    try:
        if 'messages' not in data or not data['messages']:
            print("‚ö†Ô∏è –ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ echo –∏–ª–∏ —Å—Ç–∞—Ç—É—Å")
            return '', 200

        message = data['messages'][0]
        if message.get('status') != 'inbound':
            print("‚û°Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤—Ö–æ–¥—è—â–µ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return '', 200

        phone = message['chatId']
        print("üìû –ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä:", phone)

        if phone.startswith("7"):
            phone = phone[1:]

        last_10_digits = normalize_phone(phone)
        print(f"üìû –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ü–∏—Ñ—Ä –Ω–æ–º–µ—Ä–∞: {last_10_digits}")

        contact_id = None
        start = 0

        while True:
            print(f"üîÅ –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ start={start}")
            contact_search_url = f'{BITRIX_WEBHOOK}/crm.contact.list'
            try:
                response = requests.post(contact_search_url, json={
                    "select": ["ID", "PHONE"],
                    "filter": {
                        "!PHONE": ""
                    },
                    "start": start
                }, timeout=30)
            except requests.exceptions.RequestException as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Bitrix (–∫–æ–Ω—Ç–∞–∫—Ç—ã): {e}")
                return '', 500

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            if response.status_code != 200:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π HTTP-–æ—Ç–≤–µ—Ç –æ—Ç Bitrix –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {start}: {response.status_code}")
                print("üìÑ –û—Ç–≤–µ—Ç:", response.text)
                return '', 500

            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON
            try:
                result = response.json()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {start}: {e}")
                print("üìÑ –û—Ç–≤–µ—Ç Bitrix:", response.text)
                return '', 500

            contacts = result.get('result', [])
            print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ {len(contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")

            if not contacts:
                print(f"‚õî –ü—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Äî –∫–æ–Ω—Ç–∞–∫—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –Ω–∞ start={start}")
                break

            for contact in contacts:
                phones = contact.get('PHONE', [])
                for phone_entry in phones:
                    stored_number = normalize_phone(phone_entry['VALUE'])
                    if stored_number == last_10_digits:
                        contact_id = contact['ID']
                        print(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –Ω–∞–π–¥–µ–Ω: {contact_id}")
                        break
                if contact_id:
                    break

            if contact_id or 'next' not in result:
                break

            start = result['next']
            time.sleep(0.3)

        if not contact_id:
            print("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return '', 200

        try:
            print("üîç –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫")
            deal_search_url = f'{BITRIX_WEBHOOK}/crm.deal.list'
            deal_response = requests.post(deal_search_url, json={
                "filter": {
                    "CONTACT_ID": contact_id,
                    "!STAGE_SEMANTIC_ID": "F"
                },
                "select": ["ID", "DATE_CREATE"],
                "order": {
                    "DATE_CREATE": "DESC"
                }
            }, timeout=30)

            if deal_response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–¥–µ–ª–æ–∫: {deal_response.status_code}")
                print("üìÑ –û—Ç–≤–µ—Ç:", deal_response.text)
                return '', 500

            deal_result = deal_response.json().get('result', [])
        except
